# Nginx конфигурация для Bilateral Bound с защитой от DDoS
# Разместить в /etc/nginx/sites-available/bilateralbound

upstream bilateral_backend {
    # Балансировка между воркерами
    server 127.0.0.1:3000;
    server 127.0.0.1:3001;
    server 127.0.0.1:3002;
    server 127.0.0.1:3003;
    
    # Настройки для слабого сервера
    keepalive 32;
    keepalive_requests 100;
    keepalive_timeout 60s;
}

# Ограничения для защиты от DDoS (увеличены для нормальной работы)
limit_req_zone $binary_remote_addr zone=api:10m rate=100r/s;
limit_req_zone $binary_remote_addr zone=login:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=static:10m rate=500r/s;

# Ограничение количества подключений (увеличено)
limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;

server {
    listen 80;
    server_name bilateralbound.onrender.com;
    
    # Безопасность
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
    
    # Ограничение размера запросов (увеличено)
    client_max_body_size 100k;
    client_body_buffer_size 100k;
    
    # Таймауты (увеличены)
    client_body_timeout 30s;
    client_header_timeout 30s;
    send_timeout 30s;
    
    # Gzip сжатие
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Статические файлы с кэшированием (убраны слишком строгие ограничения)
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        limit_req zone=static burst=500 nodelay;
    }
    
    # API endpoints с защитой (убраны слишком строгие ограничения)
    location /api/ {
        limit_req zone=api burst=100 nodelay;
        limit_conn conn_limit_per_ip 50;
        
        # CORS заголовки для API
        add_header 'Access-Control-Allow-Origin' $http_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With, Origin, Accept' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Обработка preflight запросов
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With, Origin, Accept' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        proxy_pass http://bilateral_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
        
        # Таймауты для API (увеличены)
        proxy_connect_timeout 10s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Socket.IO с защитой (убраны слишком строгие ограничения)
    location /socket.io/ {
        limit_req zone=api burst=200 nodelay;
        limit_conn conn_limit_per_ip 20;
        
        # CORS заголовки для Socket.IO
        add_header 'Access-Control-Allow-Origin' $http_origin always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With, Origin, Accept' always;
        add_header 'Access-Control-Allow-Credentials' 'true' always;
        
        # Обработка preflight запросов для Socket.IO
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' $http_origin always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization, X-Requested-With, Origin, Accept' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        proxy_pass http://bilateral_backend;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket таймауты (увеличены)
        proxy_connect_timeout 10s;
        proxy_send_timeout 120s;
        proxy_read_timeout 120s;
    }
    
    # Основные страницы (убраны слишком строгие ограничения)
    location / {
        limit_req zone=static burst=300 nodelay;
        limit_conn conn_limit_per_ip 50;
        
        proxy_pass http://bilateral_backend;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Кэширование HTML
        proxy_cache_valid 200 5m;
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # Health check
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # Защита от ботов
    location ~* (bot|crawler|spider) {
        return 403;
    }
    
    # Блокировка подозрительных запросов
    location ~* \.(php|asp|aspx|jsp|cgi)$ {
        return 404;
    }
    
    # Логирование
    access_log /var/log/nginx/bilateralbound_access.log;
    error_log /var/log/nginx/bilateralbound_error.log;
} 