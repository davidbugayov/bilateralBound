version: '3.8'

services:
  # Основное приложение
  bilateral-bound:
    build: .
    container_name: bilateral-bound-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3000
    ports:
      - "3000:3000"
    volumes:
      - ./logs:/app/logs
      - ./public:/app/public
    networks:
      - bilateral-network
    deploy:
      resources:
        limits:
          memory: 200M
          cpus: '0.5'
        reservations:
          memory: 100M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx для защиты и балансировки
  nginx:
    image: nginx:alpine
    container_name: bilateral-bound-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    networks:
      - bilateral-network
    depends_on:
      - bilateral-bound
    deploy:
      resources:
        limits:
          memory: 50M
          cpus: '0.2'
        reservations:
          memory: 25M
          cpus: '0.1'

  # Redis для кэширования (опционально)
  redis:
    image: redis:alpine
    container_name: bilateral-bound-redis
    restart: unless-stopped
    command: redis-server --maxmemory 50mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - bilateral-network
    deploy:
      resources:
        limits:
          memory: 60M
          cpus: '0.1'
        reservations:
          memory: 30M
          cpus: '0.05'

  # Мониторинг с Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: bilateral-bound-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - bilateral-network
    deploy:
      resources:
        limits:
          memory: 100M
          cpus: '0.2'
        reservations:
          memory: 50M
          cpus: '0.1'

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: bilateral-bound-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - bilateral-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          memory: 100M
          cpus: '0.2'
        reservations:
          memory: 50M
          cpus: '0.1'

networks:
  bilateral-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local 