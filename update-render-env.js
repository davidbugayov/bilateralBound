#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ onrender.com
 * –¢—Ä–µ–±—É–µ—Ç API –∫–ª—é—á –æ—Ç onrender.com
 */

const https = require('https');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const RENDER_API_KEY = process.env.RENDER_API_KEY;
const SERVICE_ID = process.env.RENDER_SERVICE_ID || 'your-service-id';

if (!RENDER_API_KEY) {
  console.error('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ RENDER_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('–ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á –Ω–∞: https://render.com/docs/api');
  process.exit(1);
}

// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
const environmentVariables = [
  { key: 'NODE_ENV', value: 'production' },
  { key: 'LOG_LEVEL', value: 'error' },
  { key: 'ENABLE_LOGGING', value: 'false' },
  { key: 'ENABLE_METRICS', value: 'true' },
  { key: 'MAX_SESSIONS', value: '15' },
  { key: 'MAX_VIEWERS_PER_SESSION', value: '2' },
  { key: 'TICK_RATE', value: '10' },
  { key: 'CLEANUP_INTERVAL', value: '1200000' },
  { key: 'SESSION_TIMEOUT', value: '600000' },
  { key: 'INACTIVE_TIMEOUT', value: '60000' },
  { key: 'NO_VIEWER_TIMEOUT', value: '60000' },
  { key: 'RATE_LIMIT_MAX', value: '15' },
  { key: 'API_RATE_LIMIT', value: '2' }
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = https.request(options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsed = JSON.parse(responseData);
          resolve({ status: res.statusCode, data: parsed });
        } catch (error) {
          resolve({ status: res.statusCode, data: responseData });
        }
      });
    });
    
    req.on('error', reject);
    
    if (data) {
      req.write(JSON.stringify(data));
    }
    
    req.end();
  });
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
async function updateEnvironmentVariables() {
  console.log('üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ onrender.com...');
  
  try {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
    const getServiceOptions = {
      hostname: 'api.render.com',
      port: 443,
      path: `/v1/services/${SERVICE_ID}`,
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${RENDER_API_KEY}`,
        'Content-Type': 'application/json'
      }
    };
    
    console.log('üì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ...');
    const serviceResponse = await makeRequest(getServiceOptions);
    
    if (serviceResponse.status !== 200) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞:', serviceResponse.data);
      return;
    }
    
    console.log('‚úÖ –°–µ—Ä–≤–∏—Å –Ω–∞–π–¥–µ–Ω:', serviceResponse.data.name);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const updateOptions = {
      hostname: 'api.render.com',
      port: 443,
      path: `/v1/services/${SERVICE_ID}`,
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${RENDER_API_KEY}`,
        'Content-Type': 'application/json'
      }
    };
    
    const updateData = {
      envVars: environmentVariables
    };
    
    console.log('üìù –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...');
    const updateResponse = await makeRequest(updateOptions, updateData);
    
    if (updateResponse.status === 200) {
      console.log('‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
      console.log('\nüìã –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ:');
      environmentVariables.forEach(env => {
        console.log(`   ${env.key}=${env.value}`);
      });
      
      console.log('\nüîÑ –°–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏');
      console.log('‚è±Ô∏è  –í—Ä–µ–º—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: 2-5 –º–∏–Ω—É—Ç');
      
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', updateResponse.data);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ build –∏ start –∫–æ–º–∞–Ω–¥
async function updateBuildCommands() {
  console.log('\nüîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ build –∏ start –∫–æ–º–∞–Ω–¥...');
  
  try {
    const updateOptions = {
      hostname: 'api.render.com',
      port: 443,
      path: `/v1/services/${SERVICE_ID}`,
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${RENDER_API_KEY}`,
        'Content-Type': 'application/json'
      }
    };
    
    const updateData = {
      buildCommand: 'npm install --production && npm run build:pages',
      startCommand: 'node server-production.js'
    };
    
    const updateResponse = await makeRequest(updateOptions, updateData);
    
    if (updateResponse.status === 200) {
      console.log('‚úÖ Build –∏ start –∫–æ–º–∞–Ω–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
      console.log('   Build: npm install --production && npm run build:pages');
      console.log('   Start: node server-production.js');
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥:', updateResponse.data);
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ Render.com Environment Updater');
  console.log('================================\n');
  
  if (SERVICE_ID === 'your-service-id') {
    console.log('‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ RENDER_SERVICE_ID –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç');
    console.log('   SERVICE_ID –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞');
    console.log('   https://dashboard.render.com/web/[SERVICE_ID]');
    return;
  }
  
  await updateEnvironmentVariables();
  await updateBuildCommands();
  
  console.log('\nüéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∞: https://dashboard.render.com');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { updateEnvironmentVariables, updateBuildCommands }; 